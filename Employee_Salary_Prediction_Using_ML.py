# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lRXdkYXnLStzToEISsLl_iiZigD9vqpk
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import os # To ensure the output directory exists

# --- 1. Load Data ---
print("Loading data...")
try:
    df = pd.read_csv('adult.csv')
    print("Data loaded successfully.")
except FileNotFoundError:
    print("Error: adult.csv not found. Make sure the file is in the same directory as the script.")
    exit()

# --- 2. Initial Data Exploration ---
print("\nInitial Data Info:")
df.info()
print("\nFirst 5 rows:")
print(df.head())

# --- 3. Data Preprocessing ---
print("\nStarting Data Preprocessing...")

# Replace '?' with NaN
df = df.replace('?', np.nan)

# Check for missing values after replacement
print("\nMissing values after replacing '?':")
print(df.isnull().sum())

# Separate features (X) and target (y)
X = df.drop('income', axis=1)
y = df['income']

# Identify categorical and numerical columns
categorical_cols = X.select_dtypes(include='object').columns
numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns

# Impute missing values
# Impute categorical columns with mode
print("\nImputing missing values...")
for col in categorical_cols:
    if X[col].isnull().sum() > 0:
        X[col] = X[col].fillna(X[col].mode()[0])

# Impute numerical columns (though none have NaNs after '?' replacement for this dataset)
for col in numerical_cols:
    if X[col].isnull().sum() > 0:
        X[col] = X[col].fillna(X[col].mean())
print("Missing values after imputation:")
print(X.isnull().sum())

# Encode the target variable 'income'
le = LabelEncoder()
y_encoded = le.fit_transform(y)
print(f"\nTarget variable encoded. Unique values: {np.unique(y_encoded)}")
# Save the encoder for inverse transformation if needed later
# np.save('label_encoder_classes.npy', le.classes_)

# Apply One-Hot Encoding to categorical features
# Use handle_unknown='ignore' to gracefully handle categories not seen during training
ct = ColumnTransformer(
    transformers=[('encoder', OneHotEncoder(handle_unknown='ignore', sparse_output=False), categorical_cols)],
    remainder='passthrough'
)
X_encoded = ct.fit_transform(X)
print(f"Shape of X after One-Hot Encoding: {X_encoded.shape}")

# --- 4. Model Training ---
print("\nSplitting data into training and testing sets...")
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y_encoded, test_size=0.2, random_state=42)
print(f"X_train shape: {X_train.shape}, X_test shape: {X_test.shape}")

print("Initializing and training Random Forest Classifier...")
rf_model = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1)
rf_model.fit(X_train, y_train)
print("Model training complete.")

# --- 5. Model Evaluation ---
print("\nEvaluating model performance...")
y_pred = rf_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f"\n--- Model Evaluation Results ---")
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-Score: {f1:.4f}")

print("\nConfusion Matrix:")
print(conf_matrix)

# Plotting the Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=le.classes_, yticklabels=le.classes_)
plt.title('Confusion Matrix for Income Prediction')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

# Ensure an 'output' directory exists
output_dir = 'output'
os.makedirs(output_dir, exist_ok=True)
plt.savefig(os.path.join(output_dir, 'confusion_matrix.png'))
print(f"Confusion matrix saved to {os.path.join(output_dir, 'confusion_matrix.png')}")
plt.show()

print("\nProject execution finished.")